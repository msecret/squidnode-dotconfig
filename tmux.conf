set-option -g default-shell /usr/local/bin/zsh
set -g mouse-utf8 on
set -g mouse on


is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# open a man page in new window
bind-key / command-prompt "split-window 'exec man %%'"
# quick view of processes
bind-key "~" split-window "exec htop"

# Copy-paste integration
set-option -g default-command "reattach-to-user-namespace -l bash"

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Bind ']' to use pbpaste
bind ] run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"


# Window binding like vim
bind v split-window -v -c '#{pane_current_path}'
bind x split-window -h -c '#{pane_current_path}'

# new windows
unbind n
bind-key , previous-window
bind-key . next-window

# open new windows in current dir
bind c new-window -c "$PWD"

# Because colors are real. Real important.
set -g default-terminal "screen-256color"

set -g status-interval 1

# bind -r k select-pane -U
# bind -r j select-pane -D
# bind -r l select-pane -R
# bind -r h select-pane -L

source-file ~/.tmuxline.snapshot
